Author: Stephen Gillie
Created: 7/1/2022
Updated: 7/27/2022
Notes: 
IaaS - lets you host your applications (servers)
PaaS - lets you build your applications (functions)
SaaS - lets you use your applications (cloud hosted)
DBaaS - DB are software, so DBaaS are SaaS by definition.

## Bibliography:
- FreeCodeCamp.org
	- AWS Certified Solutions Architect - Associate 2020 (PASS THE EXAM!)
	- https://www.youtube.com/watch?v=Ia-UEYYR44s
- Fireship
	- Top 50+ AWS Services Explained in 10 Minutes
	- https://www.youtube.com/watch?v=JIbIYCM48to 

#AzureAD
- Use Case: 
- Cost: 
- Encryption:
- SaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

#Amazon Sortation Center
- Use Case: Package sort for physical logistics throughput.
- Cost: 
- Encryption:
- SaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 



# Third Party Programs
## CockroachDB
- Cost: 
	- Serverless: 
		- Free 5GiB Storage
			- $1 per additional 1GiB storage
		-	Free 250M Request Units/month
			- $1 per additional 10M RUs
	- Dedicated: 
		- AWS (How much markup over EC2 or Aurora is this?)
			vCPU - $/hr
			2 - $0.51
			4 - $0.90
			8 - $1.60
			16 - $3.11
			32 - $5.34
			1GB - $0.0005088/hr (1TB - $0.5088)
			1IOPS  - $0.0000196/hr (1k IOPS - $0.0196)
		- GCP
			2 - $0.43/hr
			4 - $0.71/hr
			8 - $1.18/hr
			16 - $2.30/hr
			32 - $4.20/hr
			1GB - $0.0011986/hr (1TB - $1.1986)
- Encryption:
- SaaS (has PaaS container option)
- Use Case: PostGres switchover?
- Designed to be highly PG compliant, and some applications might "just work". 
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## ClearScale
- Use Case: 
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## JupiterOne
- Use Case: 
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Snowflake
- Use Case: Very big data
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Flywheel
- Use Case: 
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## SonicWall
- Use Case: 
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Qualys
- Use Case: Scan all ports on all hosts on your network, and report back which ones are open, alongside scary reports of which kinds of hacks hold open these ports.
- Cost: 
- Encryption: No
- SaaS?
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Apica
- Use Case: Find vulnerabilities in your dependencies.
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Snyk
- Use Case: Find vulnerabilities in your dependencies.
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Zeck: Quirky sense of humor, or unprofessional presentation?
- Use Case: Board Deck creation software (automation?) 
- Cost: 
- Encryption:
- SaaS?
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## RapidAPI
- Use Case: 
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Tailwind https://www.youtube.com/watch?v=mr15Xzb1Ook
- Use Case: Provides CSS utility classes to be combined into your desired style. Use @apply keyword in normal CSS to prevent boilerplating. VSCode aids in utility class disambiguation.
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## CircleCI
- Use Case: CI/CD testing
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Crunchbase
- Use Case: Info about companies - Bloomberg competitor?
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Glassdoor
- Use Case: Employee reviews of companies.
- Cost: 
- Encryption:
- XaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

## Optum Cloud (Not to be confused with OptumCare.)
- Use Case: Remote primary hosting, data recovery, and backup hosting. (Cloud Partner / MSP?)
- Cost: 
- Encryption:
- PaaS
- Stock price / ownership structure:
- Crunchbase: 
- Glassdoor: 

- Antipatterns? 
	- Software testing ice cream cone

# Misc 
- Code should have minimal dependencies and then be as atomic as possible. This leads to smaller and simpler microservices, leading to smaller clusters, and more flexible compute supply. Reducing dependencies reduces package bloat, and reducing obfuscation makes understanding the code less complex. Smaller and simpler containers make smaller and simpler pods. Smaller and simpler containers and pods are easier to stack in RAM and schedule across CPUs. 
- Heavy library reuse is not good, as including multiple dependencies bloats a software package while obfuscating its full functionality from even its programmer. 
- Why buy what you can make?
- What makes this proprietary standard more valuable than the industry standard? 
- Do the short term benefits of (doing X) exceed the long term support costs?
- How do game studios go cloud native? What's a better way to commit to a repo than shoving hundreds of gigabytes of textures and meshes and game levels across an Internet backbone?
- Red-green-refactor TDD process is the "buy the cheapest one and use it as a learning experience to know what you really need" strategy.

# DBaaS paradigms https://www.youtube.com/watch?v=W2Z7fbCLSTw
1. Key-Value: Basically remote variables. Remote Procedure Call where the Remote Procedure just stores and responds with the data sent to it.
	- Data is stored as: Values that are attached to keys.
	- Use Case: Very fast in-memory caching to supplement another database option.
	- Non-Ideal: Structured or general site data, joins. 
	- Schema: No
	- Horizontal: Very good
	- Offerings: Elasticache, Redis 

2. Wide Column: Structured key-value.
	- Data is stored as: Values that are attached to keys. The value's properties are treated as columns, grouped almost into tables.
	- Use Case: Provides CQL which is similar to SQL. Best used to supplement another database option.
	- Non-Ideal: Structured or general site data, joins.
	- Schema: No
	- Horizontal: Very good
	- Offerings: Cassandra, Oracle HBase (Kinda what AWS Glue does for AWS Athena.)

3. Document: Highly structured key-value.
	- Data is stored as: JSON Documents as unstructured containers for key:value pairs, and these are grouped into collections. Fields in collections can be indexed into hierarchies. This gives a good amount of relational data. No joins, so embed data instead of normalizing it.
	- Use Case: Phone games, IOT, Content Management, anywhere you have a lot of unstructured data. Much faster reads. 
	- Non-Ideal: Structured data, joins. Writes etc aren't much faster. 
	- Schema: No
	- Horizontal: Good?
	- Offerings: MongoDB, FirestormDB, DynamoDB, CouchDB, SimpleDB, etc.

4. Relational: Oldest DB (since 1974), uses SQL. 
	- Data is stored as: Tables of rows with primary key IDs, with data set in typed columns. Allows referencing a foreign key ID from another table, and performing joins between tables. Operates best when data has been normalized into the smallest normal form. ACID compliant, which normally makes it hard to scale.
	- Use Case: Banks, financial institutions, long-term structured data storage. Usual starting DB choice, since it's the first.
	- Non-Ideal: Unstructured data.
	- Schema: Yes
	- Horizontal: Usually poor, but some solutions have good scalability.
	- Offerings: SQLite, PostGres, MySQL, MSSQL, CochroachDB, numerous others. 

5. Graph: To set up a many:many relationship, instead of the Relational model's creating a Join Table with foreign keys of both tables, we just set up the data and the various edges between them, no middle table needed. Makes queries much simpler and easier, and gives better performance on big data with join-heavy queries. Uses Cypher query language.
	- Data is stored as: Nodes, with relationships between them as edges.
	- Use Case: Knowledge graphs, fraud detection, recommendation engines. (Intrusion detection?)
	- Non-Ideal: Unstructured data.
	- Schema: No?
	- Horizontal: ???
	- Offerings: Neo4j, DGraph

6. Search: The search term is then used as the key, and the list of documents in the searchable term index is the value.
	- Data is stored as: JSON Documents as unstructured containers, and the words in these are indexed into searchable terms. 
	- Use Case: Index data for searching. Can run numerous typo, ranking, relevance, and recommendation algorithms, at the cost of speed and flexibility - but could be valuable as a type-ahead search box.
	- Non-Ideal: Structured data, unstructured data for quick retrieval, joins, general site data.
	- Schema: No?
	- Horizontal: ???
	- Offerings:  Apache Lucene (Elastic, Solr), Algolia, Meili

7. Multi-model: Uses modeling to pick the optimal DB type foreach type of data added. Can add documents to collections. 
	- Data is stored as: structured and unstructured as needed.
	- Use Case: Abstract away data modeling, schemas, replication, shards, etc.
	- Non-Ideal: ???
	- Schema: When needed.
	- Horizontal: ???
	- Offerings: FaunaDB

8. Time-Series
	- Data is stored as: 
	- Use Case: 
	- Non-Ideal: 
	- Schema: 
	- Horizontal: 
	- Offerings: 

9. Data Warehouse
	- Data is stored as: 
	- Use Case: 
	- Non-Ideal: 
	- Schema: 
	- Horizontal: 
	- Offerings: 

10. Data Lake
	- Data is stored as: 
	- Use Case: 
	- Non-Ideal: 
	- Schema: 
	- Horizontal: 
	- Offerings: AWS Data Lake



